<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>PHP Example Page</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/style.css">
</head>

<body>

    <div class="container">
        <h1>PHP Syntax Examples</h1>
        <p class="warning">WARNING: You won't be able to see my comments in the code below by viewing the page source. Please open the "examples" folder from this week's "CINF362-Week-9-Lecture-Notes.zip" folder to view the code in the examples provided. To have the page work on your local machine, you'd need to install a local web server with PHP on it. 000webhost has PHP already installed so just take all files found in that folder and place them on there as an alternative to doing that. After clicking submit, the page may refresh...that's okay. Just scroll down and you'll see the expected output.</p>
        
        <h2>PHP Syntax and Working with Variables</h2>
        <?php
            // Like HTML and other languages, you can add comments in PHP
            # Use two forward slashes or the pound/hashtag symbol for a single line
            /* You can also do multiple line comments with an 
            opening/closing pair of forward slashes and asterisks (similar to JS) */ 

            # PAGE OUTPUT
            /* Inspect the page and look at the HTML. When you don't use tags in an
            echo statement, the output won't have tags either. */
            echo "This text was generated by an echo statement and isn't in any tags.";
            echo "<p>This text was generated by an echo statement but is in paragraph tags and will contain margins.</p>";

            /* If you need to use quotation marks in your HTML, you can use single-quotes
            nested inside of the main quotation marks as shown below. I've used inline styling' */
            echo "<p class='red'>This text will be red.</p>";
        
            # VARIABLES
            /* To create a variable, we use the dollar sign ($).
            You can then output the variable simply by using its name. However, if you 
            use single quotes, the variable name itself will be output. */
            $name = "chris";
            echo "<p>$name<br>";
            echo '$name</p>'; 
        
            # OPERATORS
            /* The operators in PHP are very similar to the ones in JS. The ones listed 
            below are mathematical operators. In the echo statement, I use a period (.) 
            to concatenate our strings. You don't necessarily need to do this but if your
            variable is next to other alphanumeric characters such as (a-z, 0-9), they will be added to the variable name and cause errors. */
            $num1 = 12;
            $num2 = 3;
            $a = $num1 + $num2;
            $b = $num1 - $num2;
            $c = $num1 * $num2;
            $d = $num1 / $num2;
            echo "a is " . $a . ", b is " . $b . ", c is " . $c . ", and d is " . $d;
        
            # Shorter version without concatenation
            echo "<br>a is $a, b is $b, c is $c, and d is $d";
        
            # IF/ELSE IF /ELSE LOGIC
            // Play with the number of cows below to change the output
            $cows = 100;
            if ($cows >= 10) {
                echo "<p>You have many cows.</p>";
            } else if ($cows <10 && $cows >= 0) {
                echo "<p>You have an acceptable amount of cows.";
            } else {
                echo "<p>How do you have negative cows?";
            }
        
            # ARRAYS 
            /* We can create arrays with the array keyword and then providing a list
            of items. Just like in JS, the first item can be referenced with the number 0 We can loop through the array by using the arrays length or using foreach. */
            $animals = array("Cat", "Dog", "Bird", "Lizard", "Fish");
            
        
            // We get the length of the array using count. It's like .length in JS
            echo "<p>Here are some cool animals created from an array</p>";
            echo "<ul>";
            for($x = 0; $x < count($animals); $x++) {
                echo "<li>" . $animals[$x] . "</li>";
            }
            echo "</ul>";
            
            $friends = array("Bruno", "Josh", "Tony", "Dom");
            // In this example, I use foreach instead of counting array items
            echo "<p>Mis amigos!</p><ul>";
            foreach($friends as $friend) {
                echo "<li>" . $friend . "</li>";
            }
            echo "</ul>";
                
            /* When looking at the list generated above in the HTML, you'll notice that
            everything is kind of squished together. That's because PHP won't 
            automatically add in white space. If you add a hard return at the end of the 
            echo statements but before the closing quotation mark and refresh the HTML,
            you'll see the difference. */
    
            # FUNCTIONS
            /* Functions are also very similar to how they work in JS. You can just name 
            the function and call it right after. We can also provide arguments and use
            them inside of our function to create output. */
            function myInfo($name, $age) {
                echo "<p>Your name is $name and you are $age years old.";
            }
            myInfo("Chris", 30);
        
            # INCLUDES
            /* We can include content from other pages just be referencing them. The 
            code below pulls in content from a file called table.php. */
            echo "<p>The table below is stored in the table.php file include in the zip folder. I called it by simply saying include 'table.php';";
            include "table.php";
        ?>
        
    </div>

</body>

</html>
